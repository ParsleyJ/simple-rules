package parsleyj.simplerules.forward;

import parsleyj.simplerules.unify.Substitution;

/**
 * Result of a "forward chaining" reasoning process.
 * It contains a flag representing the type of outcome of the process (failure/success). In case of a success, it
 * also contains a set of substitutions generated by the reasoning process to produce a fact that unifies with the
 * query, if a termination query was specified in the first place.
 * In any case, a {@code FCResult} object contains also the new knowledge base, i.e. the knowledge base updated with
 * the fact produced by the reasoning process itself, and some statistics about the process just ended.
 */
public class FCResult {
    /**
     * Flag that specifies if the FC algorithm was successful in answering the query (or in reaching the fixed point)?
     */
    private final boolean success;

    /**
     * Set of substitutions generated by the reasoning process to produce a fact that unifies with the
     * query, if a termination query was specified in the first place.
     */
    private final Substitution subs;

    /**
     * Number of iterations performed by the FC algorithm to expand its frontier during the search of the solution.
     */
    private final int iterationsDone;

    /**
     * The new knowledge base updated by the reasoning process.
     */
    private final FCKnowledgeBase newKB;

    /**
     * Creates a result structure.
     *
     * @param success must be set to true if this result represents a success in reaching the goal, false otherwise
     * @param iterationsDone the number of iterations done by the reasoning algorithm
     * @param subs the substitutions applied to the rule used to generate the fact that unifies with the goal
     * @param newKB the updated knowledge base
     */
    public FCResult(boolean success, int iterationsDone, Substitution subs, FCKnowledgeBase newKB) {
        this.success = success;
        this.iterationsDone = iterationsDone;
        this.subs = subs;
        this.newKB = newKB;
    }

    /**
     * Creates a result structure.
     *
     * @param success must be set to true if this result represents a success in reaching the goal, false otherwise
     * @param iterationsDone the number of iterations done by the reasoning algorithm
     */
    public FCResult(boolean success, int iterationsDone) {
        this(success, iterationsDone, new Substitution(), null);
    }


    public boolean isSuccess() {
        return success;
    }

    public int getIterationsDone() {
        return iterationsDone;
    }

    public Substitution getSubs() {
        return subs;
    }

    public FCKnowledgeBase getUpdatedKB() {
        return newKB;
    }
}
